import time

from selenium.common import NoSuchElementException, InvalidSelectorException
from selenium.webdriver.common.by import By
from parser.services.BaseParser import BaseParser
from selenium.webdriver import ActionChains

class AuParser(BaseParser):
    def __init__(self, driver):
        super().__init__(driver, platform='24au')

    def get_search_url(self):
        return "https://www.au.ru"

    def fake_mouse_activity(self):
        actions = ActionChains(self.driver)
        actions.move_by_offset(100, 100).perform()
        time.sleep(0.5)
        actions.move_by_offset(-100, -50).perform()
        time.sleep(0.5)
        print("üñ±Ô∏è –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")



    def scroll_page(self, pause_time=5, max_scrolls=3):
        """–≠–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑"""
        last_height = self.driver.execute_script("return document.body.scrollHeight")

        for i in range(max_scrolls):
            print(f"üîΩ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {i + 1}/{max_scrolls}")
            self.driver.execute_script("window.focus();")
            self.fake_mouse_activity()
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(pause_time)

            new_height = self.driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                print("üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                break
            last_height = new_height

    def parse_page(self):
        results = []
        self.scroll_page()
        items = self.driver.find_elements(By.CSS_SELECTOR, self.selectors['item'])
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –±–ª–æ–∫–æ–≤")

        for item in items:
            html = item.get_attribute('innerHTML')
            print("HTML —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞:\n", html)
            print("–ò—â–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä:", self.selectors['title'])

            result = {
                'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                'price': '–¶–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'link': '–°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'source': 'Au'
            }

            # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            try:
                result['title'] = item.find_element(
                    By.CSS_SELECTOR,
                    self.selectors['title']
                ).text.strip()
            except NoSuchElementException:
                print(f"–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {self.selectors['title']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                print(self.selectors['title'])
            except InvalidSelectorException:
                print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {self.selectors['title']}")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
            try:
                result['price'] = item.find_element(
                    By.CSS_SELECTOR,
                    self.selectors['price']
                ).text.strip()
            except NoSuchElementException:
                print(f"–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {self.selectors['price']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except InvalidSelectorException:
                print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {self.selectors['price']}")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É
            try:
                result['link'] = item.find_element(
                    By.CSS_SELECTOR,
                    self.selectors['link']
                ).get_attribute('href')
            except NoSuchElementException:
                print(f"–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {self.selectors['link']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except InvalidSelectorException:
                print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {self.selectors['link']}")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

            results.append(result)

        return results